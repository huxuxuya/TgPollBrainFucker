from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from telegram.ext import ContextTypes
from telegram.constants import ParseMode
from telegram.helpers import escape_markdown
import telegram

from src import database as db
from src.config import logger
from src.display import generate_poll_text

async def wizard_start(query: CallbackQuery, context: ContextTypes.DEFAULT_TYPE, chat_id: int):
    """Starts the poll creation wizard."""
    context.user_data['wizard_chat_id'] = chat_id
    context.user_data['wizard_state'] = 'waiting_for_title'
    await query.edit_message_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞. –í—ã —Å–º–æ–∂–µ—Ç–µ –µ–≥–æ –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–∑–∂–µ.",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"dash:group:{chat_id}")]])
    )

# +++ Poll Actions Handlers (called from dashboard) +++

async def start_poll(query: CallbackQuery, context: ContextTypes.DEFAULT_TYPE, poll_id: int):
    """Activates a draft poll and sends it to the group."""
    poll = db.get_poll(poll_id)
    if not poll or poll.status != 'draft':
        await query.answer('–û–ø—Ä–æ—Å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–µ—Ä–Ω–æ–≤–∏–∫–æ–º –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.', show_alert=True)
        return
    if not poll.message or not poll.options:
        await query.answer('–¢–µ–∫—Å—Ç –∏–ª–∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ–ø—Ä–æ—Å–∞ –Ω–µ –∑–∞–¥–∞–Ω—ã.', show_alert=True)
        return

    initial_text = generate_poll_text(poll.poll_id)
    options = poll.options.split(',')
    kb = [[InlineKeyboardButton(opt.strip(), callback_data=f'vote:{poll.poll_id}:{i}')] for i, opt in enumerate(options)]
    
    try:
        msg = await context.bot.send_message(chat_id=poll.chat_id, text=initial_text, reply_markup=InlineKeyboardMarkup(kb), parse_mode=ParseMode.MARKDOWN_V2)
        poll.status = 'active'
        poll.message_id = msg.message_id
        db.commit_session()
        await query.answer(f'–û–ø—Ä–æ—Å {poll.poll_id} –∑–∞–ø—É—â–µ–Ω.', show_alert=True)
        await show_poll_list(query, poll.chat_id, 'draft')
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –æ–ø—Ä–æ—Å–∞ {poll_id}: {e}")
        await query.answer(f'–û—à–∏–±–∫–∞: {e}', show_alert=True)

async def close_poll(query: CallbackQuery, context: ContextTypes.DEFAULT_TYPE, poll_id: int):
    """Closes an active poll."""
    poll = db.get_poll(poll_id)
    if not poll or poll.status != 'active':
        await query.answer("–û–ø—Ä–æ—Å –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω.", show_alert=True)
        return

    poll.status = 'closed'
    db.commit_session()

    final_text = generate_poll_text(poll_id)
    try:
        if poll.message_id:
            await context.bot.edit_message_text(chat_id=poll.chat_id, message_id=poll.message_id, text=final_text, reply_markup=None, parse_mode=ParseMode.MARKDOWN_V2)
        await query.answer("–û–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à—ë–Ω.", show_alert=True)
    except telegram.error.BadRequest as e:
        if "Message is not modified" in str(e):
            logger.info(f"Poll {poll_id} message was not modified on close, ignoring.")
            await query.answer("–û–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à—ë–Ω.", show_alert=True)
        else:
            logger.error(f"Could not edit final message for poll {poll_id}: {e}")
            await query.answer("–û–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à—ë–Ω, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ.", show_alert=True)
    except Exception as e:
        logger.error(f"An unexpected error occurred while closing poll {poll_id}: {e}")
        await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ–ø—Ä–æ—Å–∞.", show_alert=True)

    await show_group_dashboard(query, context, poll.chat_id)

async def delete_poll(query: CallbackQuery, poll_id: int):
    """Deletes a poll and all associated data."""
    poll = db.get_poll(poll_id)
    if poll:
        chat_id, status = poll.chat_id, poll.status
        db.delete_responses_for_poll(poll_id)
        db.delete_poll_setting(poll_id)
        db.delete_poll_option_settings(poll_id)
        db.delete_poll(poll)
        await query.answer(f"–û–ø—Ä–æ—Å {poll_id} —É–¥–∞–ª–µ–Ω.", show_alert=True)
        await show_poll_list(query, chat_id, status)
    else:
        await query.answer("–û–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)


async def private_chat_entry_point(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    admin_chats = []
    known_chats = db.get_known_chats()
    for chat in known_chats:
        try:
            admins = await context.bot.get_chat_administrators(chat.chat_id)
            if user_id in [admin.user.id for admin in admins]:
                admin_chats.append(type('Chat', (), {'id': chat.chat_id, 'title': chat.title, 'type': 'group'}))
        except Exception as e:
            logger.error(f'Error checking admin status in known chat {chat.chat_id}: {e}')

    if not admin_chats:
        await update.effective_message.reply_text("–Ø –Ω–µ –Ω–∞—à–µ–ª –≥—Ä—É–ø–ø, –≥–¥–µ –≤—ã —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏ —è —Ç–æ–∂–µ.")
        return

    keyboard = [[InlineKeyboardButton(chat.title, callback_data=f'dash:group:{chat.id}')] for chat in admin_chats]
    await update.effective_message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:', reply_markup=InlineKeyboardMarkup(keyboard))

async def show_group_dashboard(query: CallbackQuery, context: ContextTypes.DEFAULT_TYPE, chat_id: int):
    chat_title = db.get_group_title(chat_id)
    text = f"–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è —á–∞—Ç–∞ *{escape_markdown(chat_title, 2)}*:"
    keyboard = [
        [InlineKeyboardButton("üìä –ê–∫—Ç–∏–≤–Ω—ã–µ –æ–ø—Ä–æ—Å—ã", callback_data=f'dash:polls:{chat_id}:active'),
         InlineKeyboardButton("üìà –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ", callback_data=f'dash:polls:{chat_id}:closed')],
        [InlineKeyboardButton("üìù –ß–µ—Ä–Ω–æ–≤–∏–∫–∏", callback_data=f'dash:polls:{chat_id}:draft')],
        [InlineKeyboardButton("üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏", callback_data=f'dash:participants_menu:{chat_id}')],
        [InlineKeyboardButton("‚úèÔ∏è –°–æ–∑–¥–∞—Ç—å –æ–ø—Ä–æ—Å", callback_data=f'dash:wizard_start:{chat_id}')],
        [InlineKeyboardButton("üîô –ö –≤—ã–±–æ—Ä—É —á–∞—Ç–∞", callback_data='dash:back_to_chats')]
    ]
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=ParseMode.MARKDOWN_V2)

async def show_poll_list(query: CallbackQuery, chat_id: int, status: str):
    polls = db.get_polls_by_status(chat_id, status)
    status_text_map = {'active': '–∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø—Ä–æ—Å–æ–≤', 'draft': '—á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤', 'closed': '–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –æ–ø—Ä–æ—Å–æ–≤'}
    text_part = status_text_map.get(status, f'{status} –æ–ø—Ä–æ—Å–æ–≤')

    if not polls:
        text = f"–ù–µ—Ç {text_part} –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ."
        kb = [[InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data=f"dash:group:{chat_id}")]]
        await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(kb))
        return

    title_map = {'active': '–ê–∫—Ç–∏–≤–Ω—ã–µ –æ–ø—Ä–æ—Å—ã', 'draft': '–ß–µ—Ä–Ω–æ–≤–∏–∫–∏', 'closed': '–ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –æ–ø—Ä–æ—Å—ã'}
    text = f'*{title_map.get(status, status.capitalize())}*:'
    kb = []
    for poll in polls:
        msg = (poll.message or f'–û–ø—Ä–æ—Å {poll.poll_id}')[:40]
        # Common delete button for closed and draft polls
        delete_button = InlineKeyboardButton("üóë", callback_data=f"dash:delete_poll_confirm:{poll.poll_id}")
        
        if status == 'active': 
            kb.append([InlineKeyboardButton(msg, callback_data=f"results:show:{poll.poll_id}")])
        elif status == 'draft': 
            kb.append([
                InlineKeyboardButton(f"‚úèÔ∏è {msg}", callback_data=f"settings:poll_menu:{poll.poll_id}"), 
                InlineKeyboardButton("‚ñ∂Ô∏è", callback_data=f"dash:start_poll:{poll.poll_id}"), 
                delete_button
            ])
        elif status == 'closed': 
            kb.append([
                InlineKeyboardButton(f"üìä {msg}", callback_data=f"results:show:{poll.poll_id}"), 
                delete_button
            ])
    kb.append([InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data=f"dash:group:{chat_id}")])
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(kb), parse_mode=ParseMode.MARKDOWN_V2)

async def show_participants_menu(query: CallbackQuery, chat_id: int):
    title = escape_markdown(db.get_group_title(chat_id), 2)
    text = f"üë• *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ –≤* `{title}`"
    kb = [
        [InlineKeyboardButton("üìÑ –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫", callback_data=f"dash:participants_list:{chat_id}:0")],
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—é", callback_data=f"dash:add_user_fw_start:{chat_id}")],
        [InlineKeyboardButton("üö´ –ò—Å–∫–ª—é—á–∏—Ç—å/–≤–µ—Ä–Ω—É—Ç—å", callback_data=f"dash:exclude_menu:{chat_id}:0")],
        [InlineKeyboardButton("üßπ –û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫", callback_data=f"dash:clean_participants:{chat_id}")],
        [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data=f"dash:group:{chat_id}")]
    ]
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(kb), parse_mode=ParseMode.MARKDOWN_V2)

async def show_participants_list(query: CallbackQuery, chat_id: int, page: int = 0):
    """Displays a paginated list of group participants."""
    participants = db.get_participants(chat_id)
    title = escape_markdown(db.get_group_title(chat_id), 2)

    if not participants:
        text = f"–í —á–∞—Ç–µ ¬´{title}¬ª –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤."
        kb = [[InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data=f"dash:participants_menu:{chat_id}")]]
        await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(kb))
        return

    items_per_page = 50
    start_index = page * items_per_page
    end_index = start_index + items_per_page
    paginated_participants = participants[start_index:end_index]
    total_pages = -(-len(participants) // items_per_page)

    text_parts = [f'üë• *–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ \\(¬´{title}¬ª\\)* \\(–°—Ç—Ä\\. {page + 1}/{total_pages}\\):\n']
    
    for i, p in enumerate(paginated_participants, start=start_index + 1):
        name = escape_markdown(db.get_user_name(p.user_id), 2)
        status = " \\(üö´\\)" if p.excluded else ""
        text_parts.append(f"{i}\\. {name}{status}")
    
    text = "\n".join(text_parts)
    
    kb_rows = []
    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=f"dash:participants_list:{chat_id}:{page - 1}"))
    if end_index < len(participants):
        nav_buttons.append(InlineKeyboardButton("‚û°Ô∏è", callback_data=f"dash:participants_list:{chat_id}:{page + 1}"))
    
    if nav_buttons: kb_rows.append(nav_buttons)
    kb_rows.append([InlineKeyboardButton("‚Ü©Ô∏è –í –º–µ–Ω—é", callback_data=f"dash:participants_menu:{chat_id}")])
    
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(kb_rows), parse_mode=ParseMode.MARKDOWN_V2)

async def show_exclude_menu(query: CallbackQuery, chat_id: int, page: int = 0):
    """Displays a paginated menu to exclude/include participants."""
    participants = db.get_participants(chat_id)
    title = escape_markdown(db.get_group_title(chat_id), 2)

    if not participants:
        await query.answer("–ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.", show_alert=True)
        return

    items_per_page = 20
    start_index = page * items_per_page
    end_index = start_index + items_per_page
    paginated_participants = participants[start_index:end_index]
    total_pages = -(-len(participants) // items_per_page)

    text = f'üë• *–ò—Å–∫–ª—é—á–µ–Ω–∏–µ/–≤–æ–∑–≤—Ä–∞—Ç \\(¬´{title}¬ª\\)* \\(–°—Ç—Ä\\. {page + 1}/{total_pages}\\):\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –µ–≥–æ —Å—Ç–∞—Ç—É—Å.'
    
    kb = []
    for p in paginated_participants:
        name = db.get_user_name(p.user_id)
        status_icon = "üö´" if p.excluded else "‚úÖ"
        button_text = f"{status_icon} {name}"
        callback_data = f"dash:toggle_exclude:{chat_id}:{p.user_id}:{page}"
        kb.append([InlineKeyboardButton(button_text, callback_data=callback_data)])
    
    nav_buttons = []
    if page > 0: nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=f"dash:exclude_menu:{chat_id}:{page-1}"))
    if end_index < len(participants): nav_buttons.append(InlineKeyboardButton("‚û°Ô∏è", callback_data=f"dash:exclude_menu:{chat_id}:{page+1}"))
    if nav_buttons: kb.append(nav_buttons)

    kb.append([InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data=f"dash:participants_menu:{chat_id}")])
    
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(kb), parse_mode=ParseMode.MARKDOWN_V2)

async def toggle_exclude_participant(query: CallbackQuery, chat_id: int, user_id: int, page: int):
    """Toggles the 'excluded' status for a participant."""
    participant = db.get_participant(chat_id, user_id)
    if participant:
        participant.excluded = 1 - (participant.excluded or 0)
        db.commit_session()
        await show_exclude_menu(query, chat_id, page)
    else:
        await query.answer("–£—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)

async def clean_participants(query: CallbackQuery, chat_id: int):
    """Deletes all participants from a chat."""
    db.delete_participants(chat_id)
    await query.answer(f'–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è "{db.get_group_title(chat_id)}" –æ—á–∏—â–µ–Ω.', show_alert=True)
    await show_participants_menu(query, chat_id)

async def add_user_via_forward_start(query: CallbackQuery, context: ContextTypes.DEFAULT_TYPE, chat_id: int):
    """Puts the bot in a state to wait for a forwarded message."""
    context.user_data['user_to_add_via_forward'] = {'chat_id': chat_id}
    await query.edit_message_text(
        "–ü–µ—Ä–µ—à–ª–∏—Ç–µ –º–Ω–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤ —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —ç—Ç–æ–≥–æ —á–∞—Ç–∞.\n\n"
        "–í–∞–∂–Ω–æ: —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤–∫–ª—é—á–µ–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –ø–µ—Ä–µ—Å—ã–ª–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π.",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞", callback_data=f"dash:participants_menu:{chat_id}")]])
    )

async def delete_poll_confirm(query: CallbackQuery, poll_id: int):
    """Asks for confirmation before deleting a poll."""
    poll = db.get_poll(poll_id)
    if not poll:
        await query.answer("–û–ø—Ä–æ—Å —É–∂–µ —É–¥–∞–ª–µ–Ω.", show_alert=True)
        return
    text = f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –æ–ø—Ä–æ—Å ¬´{escape_markdown(poll.message or str(poll_id), 2)}¬ª? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ\\."
    kb = [[
        InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"dash:delete_poll_execute:{poll_id}"),
        InlineKeyboardButton("‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data=f"dash:polls:{poll.chat_id}:{poll.status}")
    ]]
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(kb), parse_mode=ParseMode.MARKDOWN_V2)

async def delete_poll_execute(query: CallbackQuery, poll_id: int):
    """Deletes a poll after confirmation."""
    poll = db.get_poll(poll_id)
    if poll:
        chat_id, status = poll.chat_id, poll.status
        db.delete_responses_for_poll(poll_id)
        db.delete_poll_setting(poll_id)
        db.delete_poll_option_settings(poll_id)
        db.delete_poll(poll)
        await query.answer(f"–û–ø—Ä–æ—Å {poll_id} —É–¥–∞–ª–µ–Ω.", show_alert=True)
        await show_poll_list(query, chat_id, status)
    else:
        await query.answer("–û–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)

async def dashboard_callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    
    parts = query.data.split(':')
    command = parts[1]
    params = parts[2:]

    if command == "back_to_chats": await private_chat_entry_point(update, context)
    elif command == "group": await show_group_dashboard(query, context, int(params[0]))
    elif command == "polls": await show_poll_list(query, int(params[0]), params[1])
    elif command == "participants_menu": await show_participants_menu(query, int(params[0]))
    elif command == "participants_list": await show_participants_list(query, int(params[0]), int(params[1]))
    elif command == "exclude_menu": await show_exclude_menu(query, int(params[0]), int(params[1]))
    elif command == "toggle_exclude": await toggle_exclude_participant(query, int(params[0]), int(params[1]), int(params[2]))
    elif command == "clean_participants": await clean_participants(query, int(params[0]))
    elif command == "add_user_fw_start": await add_user_via_forward_start(query, context, int(params[0]))
    elif command == "start_poll": await start_poll(query, context, int(params[0]))
    elif command == "delete_poll_confirm": await delete_poll_confirm(query, int(params[0]))
    elif command == "delete_poll_execute": await delete_poll_execute(query, int(params[0]))
    elif command == "close_poll": await close_poll(query, context, int(params[0]))
    elif command == "wizard_start": await wizard_start(query, context, int(params[0]))
    # Other handlers will be added here 