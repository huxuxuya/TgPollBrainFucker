"""add_response_to_responses_pk

Revision ID: 14d7ee834476
Revises: 0f797c53af18
Create Date: 2025-06-19 17:16:30.312772

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '14d7ee834476'
down_revision: Union[str, None] = '0f797c53af18'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Drop temp table if it exists
    op.execute("DROP TABLE IF EXISTS responses_new")
    
    # Recreate the responses table with new primary key
    op.create_table(
        'responses_new',
        sa.Column('poll_id', sa.Integer(), nullable=False),
        sa.Column('user_id', sa.BigInteger(), nullable=False),
        sa.Column('response', sa.Text(), nullable=False),
        sa.PrimaryKeyConstraint('poll_id', 'user_id', 'response', name='responses_pkey')
    )
    
    # Copy data from old to new table, using INSERT OR IGNORE to skip duplicates
    op.execute("INSERT OR IGNORE INTO responses_new (poll_id, user_id, response) SELECT poll_id, user_id, '' FROM responses")
    
    # Drop old table and rename new one
    op.drop_table('responses')
    op.execute("ALTER TABLE responses_new RENAME TO responses")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Drop temp table if it exists
    op.execute("DROP TABLE IF EXISTS responses_new")
    
    # Recreate the responses table with old primary key
    op.create_table(
        'responses_new',
        sa.Column('poll_id', sa.Integer(), nullable=False),
        sa.Column('user_id', sa.BigInteger(), nullable=False),
        sa.PrimaryKeyConstraint('poll_id', 'user_id', name='responses_pkey')
    )
    
    # Copy data from current to new table, using INSERT OR IGNORE to skip duplicates
    op.execute("INSERT OR IGNORE INTO responses_new (poll_id, user_id) SELECT DISTINCT poll_id, user_id FROM responses")
    
    # Drop old table and rename new one
    op.drop_table('responses')
    op.execute("ALTER TABLE responses_new RENAME TO responses")
    # ### end Alembic commands ###
